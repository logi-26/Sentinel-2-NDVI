# System imports
from sys import argv
from os import remove
from os.path import exists
from pathlib import Path 

# Local imports
from indices import IndicesGenerator


class ScriptParse:
    """
    Class for script parsing
    """

    def parse_paramaters(self):
        """
        This parses the script paramaters
        """
        if len(argv) == 3:

            # Get the dynamic colour-map paramater
            dynamic_colour_map = True if argv[1].upper() == "TRUE" else False

            # Get the colour-map number paramater
            try:
                colour_map_number = int(argv[2])
            except ValueError:
                colour_map_number = 1
        else:
            dynamic_colour_map = False
            colour_map_number = 0

        return dynamic_colour_map, colour_map_number
    

dynamic_colour_map, colour_map_number = ScriptParse().parse_paramaters()

# Input: Sentinel-2 jp2 band files
red_file = "/home/band_data/red_band.jp2"
nir_file = "/home/band_data/nir_band.jp2"

# Input: colour map file
colour_map_file = "/home/colour_map/colour_map.csv"

# Output: tiff and png files
outfile_ndvi_file = "/home/output/ndvi.tiff"
outfile_ndvi_colour_file = "/home/output/ndvi_colur.tiff"
outfile_ndvi_png = "/home/output/ndvi.png"

if exists(red_file) and exists(nir_file):
    # Generate NDVI file from the red and nir bands
    print(f"\nGenerating {Path(outfile_ndvi_file).name} file...")
    IndicesGenerator().generate_ndvi(red_file, nir_file, outfile_ndvi_file)

    # Generate the coloured NDVI file by applying a colour-map
    print(f"Generating {Path(outfile_ndvi_colour_file).name} file...")
    if dynamic_colour_map:
        IndicesGenerator().colour_map_image(outfile_ndvi_file, outfile_ndvi_colour_file, None, colour_map_number)
    elif exists(colour_map_file):
        IndicesGenerator().colour_map_image(outfile_ndvi_file, outfile_ndvi_colour_file, colour_map_file, None)
    else:
        print("Error: unable to load local colour-map file")

    # Generate the png file from the colour-mapped NDVI file
    if exists(outfile_ndvi_colour_file):
        print(f"Generating {Path(outfile_ndvi_png).name} file...")
        IndicesGenerator().tiff_to_png(outfile_ndvi_colour_file, outfile_ndvi_png)

        # Delete the xml file that were generated by GDAL
        if exists(f"{outfile_ndvi_file}.aux.xml"):
            remove(f"{outfile_ndvi_file}.aux.xml")
        if exists(f"{outfile_ndvi_png}.aux.xml"):
            remove(f"{outfile_ndvi_png}.aux.xml")
